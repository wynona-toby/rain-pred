// Function to predict rain
export const fetchPredictedWeather = async (
  latitude: number,
  longitude: number
) => {
  try {
    const url = `http://127.0.0.1:5000/predict`;

    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ latitude, longitude }),
    });

    if (!response.ok) throw new Error(`API Error: ${response.status}`);

    const data = await response.json();

    return {
      predicted: {
        time: data.dates.map((t: string) => new Date(t)), // Convert string to Date
        precipitation: data.predictions.map((p: number[]) => p[0]),
        rain: data.predictions.map((p: number[]) => p[1]),
        precipitationHours: data.predictions.map((p: number[]) => p[2]),
        riverDischarge: data.predictions.map((p: number[]) => p[3]),
        floodRisk: data.predictions.map(
          (p: number[]) =>
            (p[0] >= 5.0 && p[1] >= 10.0) || p[2] >= 5.0 || p[3] >= 12.0
        ),
      },
    };
  } catch (error) {
    console.error("Error fetching predicted weather:", error);
    return null;
  }
};

---------------------------------------------------------------------------------------------------------

// Function for XAI
export const explainAI = async (weatherPrompt: string) => {
  try {
    console.log("Expo Constants: ", Constants.expoConfig?.extra);
    console.log("Gen AI API ", AI_API_KEY);
    console.log("API: ", genAI);
    const result = await model.generateContent(weatherPrompt);
    return result;
  } catch (error) {
    console.error("Could not fetch an explanation:", error);
    return null;
  }
};